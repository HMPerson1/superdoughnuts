/*
 * Copyright (C) 2014 HMPerson1 <hmperson1@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package hmperson1.apps.superdoughnuts.gui;

import hmperson1.apps.superdoughnuts.GameState;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import javax.swing.JPanel;
import javax.swing.Painter;
import scala.Function0;
import scala.Unit;

/**
 * Panel that contains the actual game.
 *
 * @author HMPerson1
 */
class GamePanel extends javax.swing.JPanel {

    /**
     * Called when exit is pressed
     */
    private final Function0<Unit> backCallback;

    /**
     * Called to retrieve GameStates
     */
    private final Function0<GameState> stateRetriever;

    /**
     * Creates and populates a new {@link GamePanel}.
     *
     * @param backCallback called when back is pressed
     * @param stateRetriever called to retrieve GameStates
     */
    public GamePanel(Function0<Unit> backCallback, Function0<GameState> stateRetriever) {
        this.backCallback = backCallback;
        this.stateRetriever = stateRetriever;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvasPanel = new PainterlyPanel(new GamePainter(stateRetriever));
        final javax.swing.JButton backButton = new javax.swing.JButton();

        canvasPanel.setBackground(new java.awt.Color(255, 255, 255));
        canvasPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        canvasPanel.setMinimumSize(new java.awt.Dimension(304, 304));
        canvasPanel.setPreferredSize(new java.awt.Dimension(304, 304));

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        backCallback.apply();
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvasPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * A panel that paints itself with a {@link Painter}.
     */
    static class PainterlyPanel extends JPanel {

        /**
         * The {@link Painter} used for painting.
         */
        private final Painter<? super JPanel> painter;

        /**
         * Creates a new {@link PainterlyPanel} with the specified Painter.
         *
         * @param painter
         */
        public PainterlyPanel(Painter<? super JPanel> painter) {
            super();
            this.painter = painter;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            final Insets insets = getInsets();
            int width = getWidth() - insets.right - insets.left;
            int height = getHeight() - insets.bottom - insets.top;
            painter.paint((Graphics2D) g.create(insets.left, insets.top, width, height),
                    null, width, height);
            repaint();
        }
    }
}
